name: All OS
on: [push, pull_request]

jobs:
  linux-clang:
    env:
      build-dir: ${{ github.workspace }}/build
      build-type: RelWithDebInfo
    name: Clang ${{ matrix.clang }} Linux (hash-mode ${{ matrix.hash-typeid }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        cxx14: [On]
        cxx17: [On]
        arch: [x64]
        hash-typeid: [Off, On]
        os: [ubuntu-20.04]
        clang: [6.0, 7, 8, 9, 10, 11, 12]
        include:
          - clang: 3.9
            os: ubuntu-18.04
            triplet: x64-linux
            arch: x64
            cxx14: On
            cxx17: Off
            hash-typeid: Off

          - clang: 4.0
            os: ubuntu-18.04
            triplet: x64-linux
            arch: x64
            cxx14: On
            cxx17: On
            hash-typeid: Off

#          - clang: 5.0
#            os: ubuntu-18.04
#            triplet: x64-linux
#            arch: x64

          - arch: x64
            triplet: x64-linux

    steps: 
      - uses: actions/checkout@v2

      # Minimum GCC version required for vcpkg
      - uses: egor-tensin/setup-gcc@v1
        with:
          version: 7
          platform: ${{ matrix.arch }}

      - name: get-cmake
        uses: lukka/get-cmake@v3.21.1

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          # Location of the vcpkg as submodule of the repository.
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '57bd7102d9fd880daa1b0958692294c4a125f6d8'
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed'.
          additionalCachedPaths: ${{ env.build-dir }}/vcpkg_installed

      - uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.clang }}
          platform: ${{ matrix.arch }}

      - name: 'Run CMake'
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          cmakeAppendedArgs: '-GNinja -DKANGARU_TEST=ON -DKANGARU_TEST_CXX14=${{ matrix.cxx14 }} -DKANGARU_TEST_CXX17=${{ matrix.cxx17 }} -DKANGARU_HASH_TYPE_ID=${{ matrix.hash-typid }} -DKANGARU_BUILD_EXAMPLES=On -DKANGARU_REVERSE_DESTRUCTION=On -DCMAKE_CXX_COMPILER=clang++'
          buildDirectory: ${{ env.build-dir }}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.build-type}}


  linux-gcc:
    env:
      build-dir: ${{ github.workspace }}/build
      build-type: RelWithDebInfo
    name: GCC ${{ matrix.gcc }} Linux (hash-mode ${{ matrix.hash-typeid }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        cxx14: [Ã”n]
        cxx17: [On]
        arch: [x64]
        hash-typeid: [Off, On]
        os: [ubuntu-20.04] 
        gcc: [7, 8, 9, 10, 11]
        include:
          - gcc: 4.8
            os: ubuntu-18.04
            triplet: x64-linux
            arch: x64
            cxx14: Off
            cxx17: Off
            hash-typeid: Off

          - gcc: 5
            os: ubuntu-18.04
            triplet: x64-linux
            arch: x64
            cxx14: On
            cxx17: Off
            hash-typeid: Off

          - gcc: 6
            os: ubuntu-18.04
            triplet: x64-linux
            arch: x64
            cxx14: On
            cxx17: Off
            hash-typeid: Off

          - arch: x64
            triplet: x64-linux

    steps: 
      - uses: actions/checkout@v2

      # Minimum GCC version required for vcpkg
      - uses: egor-tensin/setup-gcc@v1
        with:
          version: 7
          platform: ${{ matrix.arch }}

      - name: get-cmake
        uses: lukka/get-cmake@v3.21.1

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          # Location of the vcpkg as submodule of the repository.
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '57bd7102d9fd880daa1b0958692294c4a125f6d8'
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed'.
          additionalCachedPaths: ${{ env.build-dir }}/vcpkg_installed

      - uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.gcc }}
          platform: ${{ matrix.arch }}

      - name: 'Run CMake'
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          cmakeAppendedArgs: '-GNinja -DKANGARU_TEST=ON -DKANGARU_TEST_CXX14=${{ matrix.cxx14 }} -DKANGARU_TEST_CXX17=${{ matrix.cxx17 }} -DKANGARU_HASH_TYPE_ID=${{ matrix.hash-typid }} -DKANGARU_BUILD_EXAMPLES=On -DKANGARU_REVERSE_DESTRUCTION=On'
          buildDirectory: ${{ env.build-dir }}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.build-type}}

  windows-msvc:
    env:
      build-dir: ${{ github.workspace }}/build
      build-type: RelWithDebInfo
    runs-on: windows-latest
    name: MSVC ${{ matrix.msvc-version }} Windows (${{ matrix.arch }}, ${{ matrix.msvc-cxx }}, ${{ matrix.permissive }}, hash-mode ${{ matrix.hash-typid }})
    strategy:
      fail-fast: false
      matrix:
        cxx14: [On]
        cxx17: [On, Off]
        hash-typid: [Off]
        permissive: [/permissive-, /permissive]
        os: [windows-2016, windows-2019]
        arch: [x86, x64]
        include:
          - os: windows-2016
            msvc-version: 2017

          - os: windows-2019
            msvc-version: 2019
       
          - arch: x86
            triplet: x86-windows

          - arch: x64
            triplet: x64-windows

          - cxx17: Off
            msvc-cxx: /std:c++14

          - cxx17: On
            msvc-cxx: /std:c++17

          - os: windows-2016
            msvc-version: 2017
            arch: x64
            cxx14: On
            cxx17: On
            hash-typeid: Off
            permissive: /permissive-
            msvc-cxx: /std:c++latest

          - os: windows-2016
            msvc-version: 2017
            arch: x64
            cxx14: On
            cxx17: On
            hash-typeid: On
            permissive: /permissive-
            msvc-cxx: /std:c++latest

          - os: windows-2019
            msvc-version: 2019
            arch: x64
            cxx14: On
            cxx17: On
            hash-typeid: Off
            permissive: /permissive-
            msvc-cxx: /std:c++latest

          - os: windows-2019
            msvc-version: 2019
            arch: x64
            cxx14: On
            cxx17: On
            hash-typeid: On
            permissive: /permissive-
            msvc-cxx: /std:c++17

        exclude:
          - arch: x86
            cxx17: Off

          - arch: x86
            permissive: /permissive-
    
    steps:
      - uses: actions/checkout@v2
      
      - uses: egor-tensin/vs-shell@v2
        with:
          arch: ${{ matrix.arch }}

      - name: vcpkg workaround
        run: New-Item ${{ github.workspace }}/vcpkg_installed/${{ matrix.triplet }}/tools -ItemType Directory
        shell: pwsh

      - name: get-cmake
        uses: lukka/get-cmake@v3.21.1

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: true
          # Location of the vcpkg as submodule of the repository.
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '57bd7102d9fd880daa1b0958692294c4a125f6d8'
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed'.
          additionalCachedPaths: ${{ env.build-dir }}/vcpkg_installed

      - name: 'Run CMake'
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          cmakeAppendedArgs: '-GNinja -DKANGARU_TEST=ON -DCMAKE_CXX_FLAGS="/EHsc /utf-8 ${{ matrix.permissive }} ${{ matrix.msvc-cxx }}" -DKANGARU_HASH_TYPE_ID=${{ matrix.hash-typid }} -DKANGARU_TEST_CXX14=${{ matrix.cxx14 }} -DKANGARU_TEST_CXX17=${{ matrix.cxx17 }} -DKANGARU_BUILD_EXAMPLES=On -DKANGARU_REVERSE_DESTRUCTION=On'
          buildDirectory: ${{ env.build-dir }}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.build-type}}

